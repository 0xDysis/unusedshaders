// Define constants
const int MAX_STEPS = 64;
const float MIN_DISTANCE = 0.001;

// Sphere function
float sphere(vec3 position, float radius) {
    return length(position) - radius;
}

// Raymarching function
vec2 raymarch(vec3 origin, vec3 direction) {
    float totalDistance = 0.0;
    int steps;
    for (steps = 0; steps < MAX_STEPS; ++steps) {
        vec3 position = origin + direction * totalDistance;
        float distance = sphere(position, 1.0);
        totalDistance += distance;
        if (distance < MIN_DISTANCE) {
            break;
        }
    }
    return vec2(totalDistance, float(steps));
}

// Main image rendering function
void mainImage(out vec4 fragColor, in vec2 fragCoord) {
    vec2 uv = (fragCoord.xy / iResolution.xy) * 2.0 - 1.0;
    uv.x *= iResolution.x / iResolution.y;
    
    vec3 cameraPosition = vec3(0.0, 0.0, -5.0);
    vec3 target = vec3(0.0, 0.0, 0.0);
    vec3 up = vec3(0.0, 1.0, 0.0);
    vec3 forward = normalize(target - cameraPosition);
    vec3 right = cross(forward, up);
    vec3 cameraUp = cross(right, forward);
    
    vec3 cameraDirection = normalize(uv.x * right + uv.y * cameraUp + 1.5 * forward);
    
    vec2 result = raymarch(cameraPosition, cameraDirection);
    float distance = result.x;
    float steps = result.y;
    
    vec3 color = vec3(steps) / float(MAX_STEPS); // Visualize the raymarching steps

    fragColor = vec4(color, 1.0);
}
